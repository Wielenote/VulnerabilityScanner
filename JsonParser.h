#ifndef JSONPARSER_H
#define JSONPARSER_H
#pragma once
#include <QJsonObject>
#include <string>
#include <vector>
#include <QByteArray>

using namespace std;

class Vulnerability
{
public:
    Vulnerability();
    string GetPackageName() const;
    string GetPackageVersion() const;
    string GetStatus() const;
    string GetDescription() const;
    double GetCVSS() const;
    string GetCVE_ID() const;
    Vulnerability(const string& desc,const double& cvss3,const string& cve_id, const string& status);
    string ToString() const;
private:
    string package_name; // не инициализируются в конструкторе
    string package_version; // не инициализируются в конструкторе
    string status; // cve/packages/0/ name=$name;statuses/
    string description;
    double cvss3;
    string cve_id;
};

class JsonFile
{
public:
    JsonFile();
    JsonFile(const QString& filePath);
    vector<Vulnerability> GetVulnerabilities();
    void ReadVulnerabilities();
    static QByteArray ReadFile(const QString &path);
    static void WriteFile(const QString& path,const QByteArray& data);
private:
    void ReadFile(string Path);
    string GetStatus(QJsonObject cve_root, string name,string OS_code_name) const;
    QJsonObject _object;
    vector<Vulnerability> vulnerabilities;

};

#endif // JSONPARSER_H
