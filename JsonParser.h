#ifndef JSONPARSER_H
#define JSONPARSER_H
#pragma once
#include <QJsonObject>
#include <string>
#include <vector>
#include <QByteArray>

using namespace std;

class Vulnerability
{
public:
    Vulnerability();
    string GetPackageName() const;
    string GetPackageVersion() const;
    string GetStatus() const;
    string GetDescription() const;
    double GetCVSS() const;
    string GetCVE_ID() const;
    void SetPackageVersion(const string& version);
    Vulnerability(const string& desc,const double& cvss3,const string& cve_id, const string& status,
    const string& name, const string& released_version, const string& current_version);
    string ToString() const;
    string GetReleasedVersion() const;
private:
    string package_name;
    string package_version;
    string status;
    string description;
    double cvss3;
    string cve_id;
    string released_version;
};

class JsonFile
{
public:
    JsonFile();
    JsonFile(const QString& filePath, const string& package_name="", const string& Package_version = "");
    vector<Vulnerability> GetVulnerabilities();
    void ReadVulnerabilities();
    static QByteArray ReadFile(const QString &path);
    static QByteArray std_ReadFile(const string& path);
    static void WriteFile(const QString& path,const QByteArray& data);
    int GetCountFiles() const;
    string GetReleasedVersion(QJsonObject cve_root, string name,string OS_code_name) const;
private:
    void ReadFile(string Path);
    string GetStatus(QJsonObject cve_root, string name,string OS_code_name) const;
    QJsonObject _object;
    string package_name;
    string package_version;
    vector<Vulnerability> vulnerabilities;
    int total_results;

};

#endif // JSONPARSER_H
