#include <JsonParser.h>
#include <QFile>
#include <QJsonDocument>
#include <QJsonArray>
#include <sstream>
using namespace std;

//Vulnerability class
Vulnerability::Vulnerability(const string& desc,const double& cvss3,const string& cve_id,
                            const string& status)
{
    this->cvss3 = cvss3;
    this->description = desc;
    this->cve_id = cve_id;
    this->status = status;
}

string Vulnerability::GetPackageName() const
{
    return this->package_name;
}

string Vulnerability::GetPackageVersion() const
{
    return this->package_version;
}

string Vulnerability::GetStatus() const
{
    return this->status;
}

string Vulnerability::GetDescription() const
{
    return this->description;
}

double Vulnerability::GetCVSS() const
{
    return this->cvss3;
}

string Vulnerability::GetCVE_ID() const
{
    return this->cve_id;
}




string Vulnerability::ToString() const
{
    stringstream  ss;
    ss << "CVE_ID: " << this->cve_id << endl <<
        "Status: " << this->status << endl <<
        "CVSS3: " << this->cvss3 << endl <<
        "Description: " << this->description;

    return ss.str();
}






//JsonFile
string JsonFile::GetStatus(QJsonObject cve_root, string name,string OS_code_name) const
{
    auto packages = cve_root.value("packages").toArray();
    auto package_root = packages.at(0).toObject();
    if(package_root.value("name").toString().toStdString() == name)
    {
        auto statuses_root_array = package_root.value("statuses").toArray();
        for (const auto& item : statuses_root_array)
        {
            if(item.toObject().value("release_codename") == QString::fromStdString(OS_code_name))
            {
                return item.toObject().value("status").toString().toStdString();
            }
        }
    }
    return "Unknown";
}



vector<Vulnerability> JsonFile::GetVulnerabilities()
{
    return vulnerabilities;
}

void JsonFile::ReadVulnerabilities()
{
    if (_object.value("cves").isArray())
    {
        auto cvesArray = _object.value("cves").toArray();
        for(const auto& item : cvesArray)
        {
            auto tempItem = item.toObject();
            auto desc = tempItem.value("description").toString().toStdString();
            auto cvss3 = tempItem.value("cvss3").toDouble();
            auto cve_id = tempItem.value("id").toString().toStdString();
            auto status = GetStatus(tempItem,"sudo", "focal");
            vulnerabilities.push_back(Vulnerability(desc, cvss3, cve_id, status));

        }
    }

}



JsonFile::JsonFile()
{
    QFile file;
    file.setFileName("/home/wielenote/Downloads/test.json");
    file.open(QIODevice::ReadOnly | QIODevice::Text);
    auto val = file.readAll();
    file.close();
    QJsonDocument document = QJsonDocument::fromJson(val);
    this->_object = document.object();
    //qDebug() << document.object().keys().at(0);
    ReadVulnerabilities();

}
JsonFile::JsonFile(const QString& path)
{
    QFile file;
    file.setFileName(path);
    file.open(QIODevice::ReadOnly | QIODevice::Text);
    auto val = file.readAll();
    file.close();
    QJsonDocument document = QJsonDocument::fromJson(val);
    this->_object = document.object();
    //qDebug() << document.object().keys().at(0);

}


QByteArray JsonFile::ReadFile(const QString& path)
{
    QFile inputFile(path);
    if (inputFile.open(QIODevice::ReadOnly))
    {
        auto res = inputFile.readAll();
        inputFile.close();
        return res;
    }
    return QByteArray();
}
void JsonFile::WriteFile(const QString& path,const QByteArray& data)
{
    QFile inputFile(path);
    if (inputFile.open(QIODevice::WriteOnly /*| QIODevice::Append*/))
    {
        //qDebug() << QString(data);
        inputFile.write(QString(data).toUtf8());
    }
    inputFile.close();
}

