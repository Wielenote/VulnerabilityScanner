#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <JsonParser.h>
#include <adddevice_dialog.h>
#include <qtreewidget.h>
#include <QTreeWidgetItem>
#include <fstream>

void MainWindow::ShowDevices()
{
    ui->listWidget->clear();
    QString path = "/home/wielenote/Documents/devices.json";
    auto file = JsonFile::ReadFile(path);
    auto doc = QJsonDocument::fromJson(file);
    auto doc_object = doc.object();

    auto list_of_devices = doc_object.keys();
    ui->listWidget->addItems(list_of_devices);
}
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->tabWidget->setCurrentIndex(0);

    ShowDevices();
}

MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::onResult(QNetworkReply *reply)
{
    auto er = reply->error();
    if(er == QNetworkReply::NoError)
    {
        QJsonDocument document = QJsonDocument::fromJson(reply->readAll());
        auto Object = document.object().value("cves");
        auto array = Object.toArray();
        auto currentObject = array.at(0).toObject();
        for(const auto& item : currentObject.keys())
        {

            qDebug() << item <<'-' << currentObject.value(item).toVariant().toString();
        }
    }
    reply->deleteLater();
}

void MainWindow::on_add_button_clicked()
{
    AddDevice_dialog dialog(this);
    this->hide();
    dialog.exec();
}

static std::vector<std::string> split(const std::string &s, char delim)
{
    std::vector<std::string> elems;
    std::stringstream ss(s);
    std::string item;
    while (std::getline(ss, item, delim)) {
        elems.push_back(item);
    }
    return elems;
}


void GetVulnerabilities(string path, string package_name)
{

}




void MainWindow::on_tabWidget_currentChanged(int index)
{
    if(index == 1)
    {
        auto path = "/home/wielenote/build-QueryTest-Desktop_Qt_6_5_3_GCC_64bit-Debug/script_result_ZOS.txt";
        std::ifstream stream(path);
        string line;
        getline(stream,line);
        QString folder_path = "/home/wielenote/build-QueryTest-Desktop_Qt_6_5_3_GCC_64bit-Debug/vulnerabilities/";
        if (stream)
        {
            while(getline(stream,line))
            {
                auto sub_strs = split(line, ' ');
                if (sub_strs[0] == "adduser")
                {
                    qDebug() << "123";
                }
                ui->treeWidget->setColumnCount(1);

                QTreeWidgetItem *res = new QTreeWidgetItem();
                int index_of_file = 0;
                bool file_was_opened = true;
                while(file_was_opened)
                {
                    ++index_of_file;
                    auto file_path = folder_path+QString::fromStdString(sub_strs[0])+ "-" + QString::number(index_of_file) +".json";
                    auto a = JsonFile(file_path,sub_strs[0]);
                    auto val = a.GetVulnerabilities();
                    if (val.size() == 0)
                        break;


                    for (const auto& item : val)
                    {
                        QTreeWidgetItem *cve_root = new QTreeWidgetItem();
                        QTreeWidgetItem *cve_info_root1 = new QTreeWidgetItem();
                        QTreeWidgetItem *cve_info_root2 = new QTreeWidgetItem();
                        std::stringstream ss;
                        ss << std::fixed << std::setprecision(2) << item.GetCVSS();


                        cve_root->setText(0, QString::fromStdString(item.GetCVE_ID()));
                        cve_info_root1->setText(0, "Status: " + QString::fromStdString(item.GetStatus()));
                        cve_info_root2->setText(0, "CVSS3: " + QString::fromStdString(ss.str()));

                        cve_root->addChild(cve_info_root1);
                        cve_root->addChild(cve_info_root2);


                        res->addChild(cve_root);

                    }
                }
                int count = res->childCount();
                if(count != 0)
                {
                    QTreeWidgetItem *packge_root = new QTreeWidgetItem(ui->treeWidget);
                    packge_root->insertChildren(0,res->takeChildren());
                    ui->treeWidget->addTopLevelItem(packge_root);
                    packge_root->setText(0, QString::fromStdString(sub_strs[0]));
                }
            }
        }

    }
    else
    {
        ui->treeWidget->clear();
    }
}


void MainWindow::on_pushButton_clicked()
{
    QString path = "/home/wielenote/Documents/devices.json";
    auto file = JsonFile::ReadFile(path);
    auto doc = QJsonDocument::fromJson(file);
    auto doc_object = doc.object();
    auto name = ui->listWidget->currentItem()->text();
    auto device = doc_object.value(name).toObject();
    stringstream ss;
    ss << "/home/wielenote/CourseProject/VulnerabilityScanner/check_installed_packages.sh " << device.value("password").toVariant().toString().toStdString()
       << " " << device.value("login").toVariant().toString().toStdString() << " " <<
        device.value("ip_adress").toVariant().toString().toStdString();// ./check_installed_packages.sh
    qDebug() << QString::fromStdString(ss.str());
    system(ss.str().c_str());
    auto a = 0;
}

