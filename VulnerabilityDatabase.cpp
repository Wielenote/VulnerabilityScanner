#include <VulnerabilityDatabase.h>
#include <algorithm>

V_Database::V_Database()
{

}

V_Database::~V_Database()
{
    //delete(data);
}

void V_Database::SortVulners(const string &package_name)
{
    sort(data[package_name].begin(),data[package_name].end(), [] (Vulnerability& a, Vulnerability& b){
        return a.GetCVE_ID() < b.GetCVE_ID();
    });
}

void V_Database::InsertVulnerability(const Vulnerability &v, const string& package_name)
{
    data[package_name].push_back(v);
    cve_to_vulnerability[v.GetCVE_ID()] = v;
}

bool V_Database::InsertVulnerability( vector<Vulnerability> &v, const string& package_name)
{
    auto it = remove_if(v.begin(), v.end(), [](Vulnerability item){
        return item.GetStatus() == "Unknown";
    });
    if (it - v.begin() != 0)
    {
        data[package_name].insert(data[package_name].end(), v.begin(), it);
        for (auto _it = v.begin(); _it!= it;++_it)
        {
            cve_to_vulnerability[_it->GetCVE_ID()] = *_it;
        }
        return true;
    }
    else
        return false;


}

map<string, vector<Vulnerability>> V_Database::GetDatabase() const
{
    return data;
}

map<string, Vulnerability> V_Database::GetCVEtoPackage() const
{
    return cve_to_vulnerability;
}

//void V_Database::DeleteVulnerability(const int &index)
//{
//    data.erase(data.begin() + index);
//}
